- section: Working Agreement
  description: A working agreement is essentially a promise to you or to your team on habits and processes you agree to follow while working on a project.
  tip: Try to incorporate as many of these habits as possible, as is they aim to reflect a real-world workflow vs just hacking away at something.  They are designed to keep you organized and ensure you deliver a quality product.
  steps:
  - name: SimpleStickies Specification Review
    icon: material-flowsheet bg-blue-600
    text: Detailed descriptions of the routes, pages, and validation requirements can be found here.
    links:
    - SimpleStickies Specification: https://github.com/Anthonyhawkins/simple-stickies

  - name: Error Handling and Feedback
    habit: true
    icon: material-error bg-rose-600
    text: As a developer, I agree to handle errors gracefully and provide feedback to the user.
    list:
      - Implement error messages for invalid commands, missing arguments, or other user errors.
      - Ensure success messages for operations such as adding tasks or creating lists are distinct and easily visible.
      - Provide suggestions for correcting common errors to guide users in the right direction.
  - name: Stories Must be Properly Tested
    habit: true
    optional: true
    icon: material-labs bg-emerald-600
    text: As a developer, I agree to ensure each story is properly tested.  (A lot of times it can be a pain to test a CLI's tool main function, you'll understand when you get there, try your best, 100% code coverage is not required)
    list:
      - Each story includes necessary unit testing.
      - Tests are run upon completion of a story.
      - All tests should pass before merge.
  - name: Use Story Branches
    habit: true
    optional: true
    icon: material-folder_data bg-amber-600
    text: As a developer, I agree to create a new git branch for each story I work on.
    list:
      - Checkout a new branch for each story.
      - Development for a story is committed to the story branch.
      - Upon completion, create a PR to merge a story branch back into main.
      - If you are doing this project solo, you will be merging your own PRs.


- section: Phase 1 - MVP
  description: Minimum Viable Product CRUD interface.

- section: Server Initialization and Home Page
  description: Set up the basic structure and configuration for the server, including initializing the server, defining the home route, and creating the homepage.
  steps:
    - name: Initialize Server
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want the server to be up and running, so that I can access the application through my web browser.
      list:
        - The server should be configured to listen on a specified port.
        - The server should handle incoming requests and route them to the appropriate handlers.

    - name: Define Home Route
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to access the application by navigating to the homepage, so that I can learn about the app and find my way around.
      list:
        - The server should recognize and respond to requests at the root URL ("/").
        - The server should call the appropriate handler function to generate the homepage.

    - name: Create Homepage
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to see a homepage that introduces the application, so that I can understand what the app does and navigate to other pages.
      list:
        - The homepage should include a brief description of the application.
        - The homepage should provide links to view all sticky notes and to create a new note.
        - The homepage content should be generated dynamically when a request is received.

    - name: Implement Basic Error Handling
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want the server to handle errors gracefully, so that I receive helpful feedback if something goes wrong.
      list:
        - The server should handle common errors such as missing routes or server issues.
        - The server should return user-friendly error messages or status codes in response to errors.


- section: Create Sticky Note
  description: Implement the functionality to create a new sticky note. Define the route for creating notes and create a page with a form to input the note's title and content.
  steps:
    - name: Define Create Route
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to access a form to create a new sticky note, so that I can easily add my notes to the application.
      list:
        - The server should recognize and respond to requests at `/notes/new` to serve the creation form.
        - The server should call the appropriate handler function to generate the form page.

    - name: Create Note Form
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to see a simple form for entering a note's title and content, so that I can create a new sticky note.
      list:
        - The form should include fields for the note's title and content.
        - The form should have a submit button to create the note.
        - There should be a cancel button that redirects the user back to the list of notes.

    - name: Handle Note Creation
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want the server to save my new note when I submit the form, so that my note is stored and can be accessed later.
      list:
        - The server should handle form submissions from `/notes/new` and create a new note file.
        - The server should validate the note's title and content according to the defined rules.
        - If validation passes, the note should be saved, and the user should be redirected to the list of notes.
        - If validation fails, the user should be redirected back to the form with the submitted values pre-populated.

    - name: Display Success or Error Message
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to see a confirmation when my note is created or an error if something goes wrong, so that I know the outcome of my action.
      list:
        - The server should display a success message if the note is created successfully.
        - The server should display an error message if there is an issue with creating the note, along with details on how to correct it.


- section: List Sticky Notes
  description: Implement the functionality to list all existing sticky notes. Define the route to display all notes and create a page that lists the titles of all stored notes.
  steps:
    - name: Define List Route
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to access a page that lists all my sticky notes, so that I can easily see and access the notes I have created.
      list:
        - The server should recognize and respond to requests at `/notes` to serve the list of sticky notes.
        - The server should call the appropriate handler function to generate the list page.

    - name: Generate List of Notes
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to see a list of all my sticky notes, so that I can quickly find and view a specific note.
      list:
        - The server should retrieve the titles of all stored sticky notes.
        - The list should be displayed in a grid or column layout.
        - Each note title should be a clickable link that takes the user to the detailed view of that note.

    - name: Display Empty State
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to see a message if there are no sticky notes, so that I know I need to create one.
      list:
        - If no sticky notes exist, the server should display a message indicating that no notes have been created yet.
        - The page should include a link or button to create a new sticky note.

    - name: Provide Navigation
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to easily navigate back to the home page or create a new sticky note from the list page, so that I can manage my notes efficiently.
      list:
        - The list page should include navigation links back to the home page and to the new note creation form.
        - The navigation should be clear and accessible from the list of notes.

- section: Show Sticky Note
  description: Implement the functionality to display a specific sticky note. Define the route to view an individual note and create a page that shows the note's title and content.
  steps:
    - name: Define Show Route
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to click on a note title from the list and view the full content of that sticky note, so that I can read or review the details of my note.
      list:
        - The server should recognize and respond to requests at `/notes?name=<name>` to serve the specific note.
        - The server should call the appropriate handler function to generate the detailed view page.

    - name: Display Note Content
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to see the full content of my sticky note along with its title, so that I can review the information I saved.
      list:
        - The server should retrieve the content of the specified sticky note file.
        - The page should display the note's title prominently, followed by the note's content.
        - The layout should be clear and readable, ensuring the note's content is easily accessible.

    - name: Provide Edit and Delete Options
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to see options to edit or delete the note while viewing it, so that I can make changes or remove it if needed.
      list:
        - The page should include a button or link to edit the note, which redirects the user to the update page.
        - The page should also include a button or link to delete the note, with appropriate confirmation to avoid accidental deletion.

    - name: Handle Missing Notes Gracefully
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to see a helpful message if the note I’m trying to view doesn’t exist, so that I understand what happened and what I can do next.
      list:
        - If the specified note does not exist, the server should display a friendly error message.
        - The error message should include links to go back to the list of notes or to create a new note.

- section: Update Sticky Note
  description: Implement the functionality to update an existing sticky note. Define the route for updating notes and create a page with a form pre-populated with the current note's data for editing.
  steps:
    - name: Define Edit Route
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to access a form to edit my sticky note, so that I can make changes to the title or content.
      list:
        - The server should recognize and respond to requests at `/notes/edit?name=<name>` to serve the edit form.
        - The server should call the appropriate handler function to generate the edit page with the note's current data.

    - name: Pre-populate Form with Note Data
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want the form to be pre-filled with my note's current title and content, so that I can easily make and save my changes.
      list:
        - The edit form should be pre-populated with the existing title and content of the sticky note.
        - The user should be able to modify both the title and content before submitting the changes.

    - name: Handle Note Update
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want the server to save my changes when I submit the form, so that my updated note is stored and accessible.
      list:
        - The server should handle form submissions from `/notes/edit?name=<name>` and update the existing note file with the new data.
        - The server should validate the updated title and content according to the defined rules.
        - If validation passes, the note should be updated, and the user should be redirected to the updated note's page.
        - If validation fails, the user should be redirected back to the form with the submitted values pre-populated.

    - name: Provide Cancel Option
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want the option to cancel editing and return to the previous page, so that I can leave the note unchanged if I change my mind.
      list:
        - The edit page should include a cancel button that redirects the user back to the list of notes or the note's detail page without making any changes.

- section: Delete Sticky Note
  description: Implement the functionality to delete a sticky note. Define the route for deleting notes and ensure users can remove a note from the system.
  steps:
    - name: Define Delete Route
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to delete a sticky note, so that I can remove it permanently if it's no longer needed.
      list:
        - The server should recognize and respond to requests at `/notes?name=<name>&method=DELETE` to delete the specified note.
        - The server should call the appropriate handler function to perform the deletion.

    - name: Confirm Deletion
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to confirm before deleting a sticky note, so that I don't accidentally remove important information.
      list:
        - The server should display a confirmation prompt before deleting the note.
        - The user should be able to confirm or cancel the deletion action.

    - name: Handle Note Deletion
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want the server to permanently delete my sticky note when I confirm the action, so that it is removed from the system.
      list:
        - The server should delete the specified note file from the filesystem upon confirmation.
        - After deletion, the user should be redirected to the list of all notes with a success message.

    - name: Provide Feedback on Deletion
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to receive feedback after deleting a note, so that I know the action was successful.
      list:
        - The server should display a success message once the note is successfully deleted.
        - If the note could not be deleted (e.g., if it no longer exists), the server should provide an appropriate error message.


#
# Phase 2
# 

- section: Phase 2 - Boards
  description: Phase 2 introduces a board management features and the introduction of a SQL DB

- section: Implement SQL Database and Schema
  description: Transition from using filesystem-based storage to a SQL database for storing sticky notes and boards. Implement the defined database schema to support the storage and management of notes and boards.
  steps:
    - name: Set Up SQL Database Connection
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to establish a connection to the SQL database, so that I can store and retrieve data for notes and boards.
      list:
        - Configure the database connection settings (e.g., database name, user, password, etc.).
        - Implement a method to open and close the database connection.
        - Ensure that the database connection is available for use throughout the application.

    - name: Implement Database Schema
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement the database schema, so that the application can properly store notes and boards.
      list:
        - Create the necessary SQL `CREATE TABLE` commands for notes and boards.
        - Execute the SQL commands to set up the database tables.
        - Verify that the tables are correctly created and ready for use.


    - name: Refactor Filesystem Logic to SQL Equivalents
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to refactor the existing filesystem-based logic to use SQL equivalents, so that notes and boards are managed through the SQL database.
      list:
        - Replace file-based read and write operations with SQL queries.
        - Test the refactored logic to confirm that it functions correctly with the SQL database.


- section: Implement Board Management
  description: Create functionality to allow users to create, update, and delete boards, including managing the notes associated with each board.
  steps:
    - name: Implement Create Board Functionality
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to create a new board, so that I can organize my notes within specific categories.
      list:
        - Implement a form for users to input a board name.
        - Validate the board name to ensure it meets the required criteria.
        - Save the new board to the SQL database and redirect the user to the board index page.

    - name: Implement Update Board Functionality
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to update the name of an existing board, so that I can correct mistakes or better organize my notes.
      list:
        - Provide an interface to edit the board name.
        - Validate the updated board name before saving.
        - Update the board in the SQL database and redirect the user to the updated board's detail page.

    - name: Implement Delete Board Functionality
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to delete a board, so that I can remove unwanted or unused categories, provided no notes are associated with it.
      list:
        - Implement logic to check if a board has any associated notes.
        - Allow deletion only if the board has no associated notes.
        - Delete the board from the SQL database and redirect the user to the board index page.

    - name: Implement List All Boards Functionality
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to view a list of all boards, so that I can see the available categories and the number of notes in each.
      list:
        - Implement the `INDEX BOARD` route to display all boards.
        - The page should show the name of each board and the count of associated notes.
        - Each board name should be a clickable link that redirects to the `SHOW BOARD` page.

    - name: Implement Show Board Functionality
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to view the details of a specific board, so that I can see all the notes associated with it.
      list:
        - Implement the `SHOW BOARD` route to display a single board's details.
        - The page should display the board name and a list of all associated notes.
        - Each note in the list should be a clickable link that redirects to the note's detail page.

- section: Update Existing Pages and Routes
  description: Update the note creation and editing processes to include board selection. Ensure all relevant pages and routes display and manage board information appropriately throughout the application.
  steps:
    - name: Update Note Creation Page to Include Board Selection
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to select a board when creating a new note, so that I can organize my notes within specific categories.
      list:
        - Update the `NEW` note page to include a dropdown or selection input for choosing a board.
        - Ensure the `CREATE` route handles the board selection and associates the new note with the selected board in the database.
        - Validate that the board selection is saved correctly and the user is redirected to the appropriate page.

    - name: Update Note Editing Page to Allow Board Changes
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to change the board of an existing note, so that I can reorganize my notes as needed.
      list:
        - Update the `EDIT` note page to include the current board selection and allow the user to change it.
        - Ensure the `UPDATE` route handles the updated board selection and correctly updates the note’s board association in the database.
        - Validate that the changes are saved correctly and the user is redirected to the updated note’s detail page.

    - name: Update Note Display to Show Associated Board
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to see the associated board when viewing a note, so that I know which category it belongs to.
      list:
        - Update the `SHOW` note page to display the note's associated board along with the title and content.
        - Ensure the `INDEX` page lists all notes with their associated boards displayed next to the titles.
        - Validate that the board information is displayed correctly across all relevant pages.

- section: Phase 3 - Search
  description: Introduce a basic search capability.

- section: Implement Search Functionality
  description: Add search functionality to allow users to find notes based on keywords in titles, content, or associated boards. Ensure the search is intuitive and returns relevant results.
  steps:
    - name: Implement Search Page
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to access a search page where I can enter keywords, so that I can find specific notes quickly.
      list:
        - Implement the `SEARCH PAGE` route to display a form where users can enter search terms.
        - Create a search input field and a submit button on the search page.
        - Ensure the page is accessible from the main navigation menu.

    - name: Implement Search Query Handling
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want the application to process my search query and find matching notes, so that I can easily locate the information I need.
      list:
        - Implement the `SEARCH RESULTS` route to handle search queries submitted from the search page.
        - Parse the search query and execute a database search for notes that match the keywords in their title, content, or associated boards.
        - Ensure the search function is optimized for performance, especially with large datasets.

    - name: Implement Search Results Page
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to see a list of notes that match my search query, so that I can quickly access the relevant information.
      list:
        - Display the search results on a dedicated results page, listing the note titles, associated boards, and a snippet of the content.
        - Ensure each result includes a link to the full note detail page.
        - Implement pagination if the number of results exceeds a certain threshold to improve usability.

    - name: Integrate Search Across the Application
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want the search functionality to be integrated throughout the application, so that I can easily search from anywhere.
      list:
        - Add a search bar to the main navigation, accessible from all pages.
        - Ensure the search functionality is consistent and returns accurate results across different contexts (e.g., searching within a specific board vs. global search).
        - Validate that the search results are displayed correctly and that links to notes work as expected.

#
# Phase 4 API 
#

- section: Phase 4 - REST API
  description: Implement a basic API which accepts and returns JSON.

- section: Implement JSON API
  description: Develop a JSON API to allow programmatic access to notes and boards, enabling operations such as creating, updating, retrieving, and deleting notes and boards via RESTful API endpoints.
  steps:
    - name: Implement GET All Notes API Endpoint
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement an API endpoint to retrieve all notes in JSON format, so that I can access the notes programmatically.
      list:
        - Create a `GET /api/notes` route that returns a JSON array of all notes.
        - Ensure each note includes its title, content, and associated board.
        - Test the endpoint to verify it returns the correct data.

    - name: Implement GET Note by ID API Endpoint
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement an API endpoint to retrieve a specific note by its ID, so that I can access detailed information about a single note.
      list:
        - Create a `GET /api/notes/{id}` route that returns the specified note as a JSON object.
        - Ensure the note includes its title, content, and associated board.
        - Test the endpoint to verify it returns the correct note data.

    - name: Implement CREATE Note API Endpoint
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement an API endpoint to create a new note via a JSON payload, so that I can add notes programmatically.
      list:
        - Create a `POST /api/notes` route that accepts a JSON payload to create a new note.
        - Ensure the payload includes the note's title, content, and associated board ID.
        - Return the newly created note as a JSON object, including its assigned ID.
        - Test the endpoint to verify that notes can be created successfully.

    - name: Implement UPDATE Note API Endpoint
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement an API endpoint to update an existing note via a JSON payload, so that I can modify notes programmatically.
      list:
        - Create a `PUT /api/notes/{id}` route that accepts a JSON payload to update the specified note.
        - Ensure the payload can modify the note's title, content, and associated board ID.
        - Return the updated note as a JSON object.
        - Test the endpoint to verify that notes can be updated successfully.

    - name: Implement DELETE Note API Endpoint
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement an API endpoint to delete a specific note by its ID, so that I can remove notes programmatically.
      list:
        - Create a `DELETE /api/notes/{id}` route that deletes the specified note.
        - Ensure the endpoint returns a confirmation message in JSON format.
        - Test the endpoint to verify that notes can be deleted successfully.

    - name: Implement GET All Boards API Endpoint
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement an API endpoint to retrieve all boards in JSON format, so that I can access the boards programmatically.
      list:
        - Create a `GET /api/boards` route that returns a JSON array of all boards.
        - Ensure each board includes its name and the count of associated notes.
        - Test the endpoint to verify it returns the correct data.

    - name: Implement GET Board by ID API Endpoint
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement an API endpoint to retrieve a specific board by its ID, so that I can access detailed information about a single board.
      list:
        - Create a `GET /api/boards/{id}` route that returns the specified board as a JSON object.
        - Ensure the board includes its name and a list of associated notes.
        - Test the endpoint to verify it returns the correct board data.

    - name: Implement CREATE Board API Endpoint
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement an API endpoint to create a new board via a JSON payload, so that I can add boards programmatically.
      list:
        - Create a `POST /api/boards` route that accepts a JSON payload to create a new board.
        - Ensure the payload includes the board's name.
        - Return the newly created board as a JSON object, including its assigned ID.
        - Test the endpoint to verify that boards can be created successfully.

    - name: Implement UPDATE Board API Endpoint
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement an API endpoint to update an existing board via a JSON payload, so that I can modify boards programmatically.
      list:
        - Create a `PUT /api/boards/{id}` route that accepts a JSON payload to update the specified board.
        - Ensure the payload can modify the board's name.
        - Return the updated board as a JSON object.
        - Test the endpoint to verify that boards can be updated successfully.

    - name: Implement DELETE Board API Endpoint
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement an API endpoint to delete a specific board by its ID, so that I can remove boards programmatically.
      list:
        - Create a `DELETE /api/boards/{id}` route that deletes the specified board.
        - Ensure the endpoint returns a confirmation message in JSON format.
        - Test the endpoint to verify that boards can be deleted successfully.

    - name: Implement GET Notes by Board API Endpoint
      icon: material-sticky_note_2 bg-yellow-600
      text: As a developer, I want to implement an API endpoint to retrieve all notes associated with a specific board, so that I can filter notes by their board programmatically.
      list:
        - Create a `GET /api/boards/{id}/notes` route that returns a JSON array of notes associated with the specified board.
        - Ensure each note includes its title, content, and associated board ID.
        - Test the endpoint to verify it returns the correct notes data.


- section: HTML Authentication
  description: Implement the core authentication functionality for the HTML routes, allowing users to register, log in, change passwords, and log out securely.
  steps:
    - name: Implement User Registration
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to register with a username and password, so that I can create an account and access the application.
      : HTML-Register-Seq.JPG

    - name: Implement User Login
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to log in with my username and password, so that I can securely access my account.
      attachment: HTML-Login-Seq.JPG

    - name: Implement Change Password
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to change my password, so that I can maintain the security of my account.
      attachment: HTML-ChangePassword-Seq.JPG

    - name: Implement User Logout
      icon: material-sticky_note_2 bg-yellow-600
      text: As a user, I want to log out, so that I can end my session and protect my account.
      attachment: HTML-Logout-Seq.JPG